{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hi</p>"},{"location":"code-structure/","title":"Code structure","text":""},{"location":"code-structure/#doctrine","title":"Doctrine","text":"<p>We use DoctrineExtensions on a lot of entity fields. It introduces more functionality that allows to use Doctrine more efficiently. We use:</p> <ol> <li>Timestampable to    automatically update date fields on create and update</li> </ol> <pre><code>/**\n * @Gedmo\\Timestampable(on=\"create\")\n * @ORM\\Column(type=\"datetime\", name=\"created_on\", options={\"default\": \"CURRENT_TIMESTAMP\"})\n */\nprivate DateTimeInterface $createdOn;\n\n/**\n * @Gedmo\\Timestampable(on=\"update\")\n * @ORM\\Column(type=\"datetime\", name=\"edited_on\", options={\"default\": \"CURRENT_TIMESTAMP\"})\n */\nprivate DateTimeInterface $editedOn;\n</code></pre> <ol> <li> <p>Softdeleteable to    implicitly delete records. It introduces a <code>deleted_at</code> column on the entity, and filters doctrine methods like    <code>findAll</code> to ignore deleted records.</p> </li> <li> <p>Sortable to make entity    records sortable. E.g. the <code>sequence</code> column used by sortable datagrids. </p> </li> </ol> <pre><code>/**\n * @Gedmo\\SortablePosition\n * @ORM\\Column(type=\"integer\", length=11, nullable=true)\n */\nprivate ?int $sequence;\n\n/**\n * @Gedmo\\SortableGroup\n * @ORM\\Column(type=\"locale\", name=\"language\")\n */\nprivate Locale $locale;\n</code></pre>"},{"location":"frontend-theming/","title":"Frontend/Theming","text":"<p>Currently the module includes the <code>CommerceDemo</code> demo theme which is used in the preview url and to develop locally. It's built using an modern and productive stack:</p> <ul> <li>Tailwind CSS, a highly customisable CSS framework which can be used directly in your HTML. No more heavy CSS!</li> <li>Alpine.js, a lightweight tool for progressive enhancement. Sprinkle some javascript on our Twig templates.</li> <li>Vite, a lightning fast build tool \u26a1. Only needs a <code>vite.config.js</code> file, less complex than Webpack.</li> <li>Typescript</li> </ul> <p>The demo theme uses a few dependencies. We try to avoid jQuery and go for lightweight, vanilla JS libraries. E.g.</p> <ul> <li>Algolia Autocomplete.js which provides a simple way to create a very powerful search box.</li> <li>Splide, a lightweight slider and carousel written in pure Javascript without any dependencies.</li> <li>Notyf, a simple, minimalistic, dependency-free, ~ 3KB Javascript library for toast notifications.</li> <li>Photoswipe a vanilla Javascript lightbox/image gallery without dependencies.</li> </ul>"},{"location":"frontend-theming/#run-vite-dev-server-with-hmr","title":"Run Vite dev server with HMR","text":"<p>When we edit our .html.twig, .ts or .css files, we would like to instantly see the changes. Start the frontend dev server with:</p> <pre><code>cd src/Frontend/Themes/CommerceDemo\nnpm run dev\n</code></pre> <p>This will start up Vite in watch-mode, and also output Typescript errors in the console. The <code>vite_entry_link_tags</code> and <code>vite_entry_script_tags</code> Twig tags in <code>Base.html.twig</code> will check if the dev server is running and output the appropriate tags.</p> <p>Read more about the Vite &amp; Fork CMS integration at https://github.com/jessedobbelaere/fork-cms-vite-boilerplate</p>"},{"location":"installation/","title":"Installation","text":"<p>Take a look at <code>deploy/prepare-fork-cms.sh</code> which executes these steps as part of the demo app.</p>"},{"location":"installation/#1-upload-the-module","title":"1. Upload the module","text":"<p>Install this module as usual, by copying the <code>Commerce</code> folder from the <code>Backend</code> and <code>Frontend</code> folders to your project.</p>"},{"location":"installation/#2-install-dependencies","title":"2. Install dependencies","text":"<p>This module requires extra Composer dependencies, you can install these by running:</p> <pre><code>composer require tetranz/select2entity-bundle \"v2.10.1\"\ncomposer require knplabs/knp-snappy-bundle \"v1.6.0\"\ncomposer require h4cc/wkhtmltopdf-amd64 \"^0.12.4\"\ncomposer require gedmo/doctrine-extensions \"^3.0\"\ncomposer require jeroendesloovere/sitemap-bundle \"^2.0\"\ncomposer require tbbc/money-bundle \"^4.1\"\ncomposer require mollie/mollie-api-php \"^2.0\"\n\n# In case you want to load the demo fixtures or run unit tests\ncomposer require --dev doctrine/doctrine-fixtures-bundle\ncomposer require --dev zenstruck/foundry\n</code></pre> <p>On macOS you can skip installing <code>h4cc/wkhtmltopdf-amd64</code> and install <code>wkhtmltopdf</code> using:</p> <pre><code>brew install --cask wkhtmltopdf\n</code></pre> <p>Enable the bundles in your kernel:</p> <pre><code>// app/AppKernel.php\npublic function registerBundles()\n{\n    $bundles = [\n        //...\n        new \\Tetranz\\Select2EntityBundle\\TetranzSelect2EntityBundle(),\n        new \\Knp\\Bundle\\SnappyBundle\\KnpSnappyBundle(),\n        new \\Backend\\Modules\\Sitemaps\\Sitemaps(),\n        new \\JeroenDesloovere\\SitemapBundle\\SitemapBundle(),\n        new \\Tbbc\\MoneyBundle\\TbbcMoneyBundle(),\n    ];\n}\n</code></pre> <p>Add the wkhtmltopdf path to your config file:</p> <pre><code># app/config/config.yml\nknp_snappy:\npdf:\nenabled: true\nbinary: %wkhtmltopdf.binary%\n</code></pre> <p>And update your <code>parameters.yml</code> with the following:</p> <pre><code>    # After installing h4cc/wkhtmltopdf-amd64\nwkhtmltopdf.binary: %kernel.root_dir%/../vendor/h4cc/wkhtmltopdf-amd64/bin/wkhtmltopdf-amd64\n\n# Or when installing wkhtmltopdf via brew on macOS:\nwkhtmltopdf.binary:     /usr/local/bin/wkhtmltopdf\n</code></pre>"},{"location":"installation/#3-configure-liipimaginebundle-filters","title":"3. Configure LiipImagineBundle filters","text":"<p>Configure the following filters to your config file, to use properly resized images in the frontend.</p> <pre><code># app/config/config.yml\nliip_imagine:\nfilter_sets:\n...\nproduct_thumbnail:\nfilters:\nauto_rotate: ~\nstrip: ~\nscale: { dim: [ 300, 380 ] }\nproduct_thumbnail_square:\nfilters:\nauto_rotate: ~\nstrip: ~\nthumbnail: { size: [ 250, 250 ], mode: outbound }\nproduct_large:\nfilters:\nauto_rotate: ~\nstrip: ~\nscale: { dim: [ 600, 800 ] }\nproduct_slider_thumbnail:\nfilters:\nauto_rotate: ~\nstrip: ~\nscale: { dim: [ 100, 100 ] }\n</code></pre>"},{"location":"installation/#4-add-a-twig-extension-to-parse-scriptlink-tags","title":"4. Add a Twig extension to parse script/link tags","text":"<p>The frontend theme builds assets to a dist/ folder. To include these assets, Twig can use a manifest.json file. The included <code>ViteAssetExtension.php</code> should help do that. However, a theme cannot register Symfony services (yet), so we have to add it manually to <code>config.yml</code>.</p> <pre><code>services:\n...\n\n# Configure the twig extension for ViteJS to easily switch between dev and prod script tags\nFrontend\\Themes\\CommerceDemo\\ViteAssetExtension:\nautowire: true\narguments:\n$environment: '%kernel.environment%'\ntags:\n- { name: twig.extension }\n- { name: kernel.event_listener, event: kernel.exception }\n</code></pre> <p>Now simply build the frontend:</p> <pre><code>cd src/Frontend/Themes/CommerceDemo\nnpm run build # or npm run dev to watch for changes\n</code></pre>"},{"location":"installation/#start-selling","title":"Start selling","text":"<p>After setting up Mollie or Buckaroo you are able to sell your products!</p> <p>But to increase sales and SEO we added some tools.</p>"},{"location":"installation/#1-sitemap-generator","title":"1. Sitemap generator","text":"<p>Install the sitemap generator build bij jeroondesloovere: https://github.com/friends-of-forkcms/fork-cms-module-sitemaps</p> <p>When you create a Cronjob you should be able to generate a sitemap each day.</p>"},{"location":"installation/#2-google-shopping-feed","title":"2. Google Shopping Feed","text":"<p>When you assign Google Shopping Categories to your categories you would be able to display products in Google Shopping.</p> <p>Setup is really easy:</p> <ol> <li>Assign the right categories</li> <li>Create a cronjob which generates the feed daily, the cronjob command is: <code>php bin/console catalog:generate-merchant-feed</code></li> <li>Add the feed to your Google Mechant Center</li> <li>Start selling products</li> </ol> <p>This feeds also works for Bing!</p>"},{"location":"local-development/","title":"Local development","text":""},{"location":"local-development/#symlinking-the-module-folders","title":"Symlinking the module folders","text":"<p>When developing locally, I usually create a symlinks between the folders in this git repository (<code>fork-cms-module-commerce</code>)  and an actual Fork CMS installation (<code>fork-cms-module-commerce-demo</code>) to develop against in PhpStorm, e.g.:</p> <pre><code>ln -sf ~/Code/fork-cms/modules/fork-cms-module-commerce/src/Backend/Modules/Commerce ~/Code/fork-cms/modules/fork-cms-module-commerce-demo/src/Backend/Modules/Commerce\nln -sf ~/Code/fork-cms/modules/fork-cms-module-commerce/src/Backend/Modules/CommerceCashOnDelivery ~/Code/fork-cms/modules/fork-cms-module-commerce-demo/src/Backend/Modules/CommerceCashOnDelivery\nln -sf ~/Code/fork-cms/modules/fork-cms-module-commerce/src/Backend/Modules/CommercePickup ~/Code/fork-cms/modules/fork-cms-module-commerce-demo/src/Backend/Modules/CommercePickup\nln -sf ~/Code/fork-cms/modules/fork-cms-module-commerce/src/Frontend/Modules/Commerce ~/Code/fork-cms/modules/fork-cms-module-commerce-demo/src/Frontend/Modules/Commerce\nln -sf ~/Code/fork-cms/modules/fork-cms-module-commerce/src/Frontend/Themes/CommerceDemo ~/Code/fork-cms/modules/fork-cms-module-commerce-demo/src/Frontend/Themes/CommerceDemo\n</code></pre> <p>This is optional of course, but it's far easier than having to copy the module code from/to your Fork CMS installation each time you're ready to commit.</p>"},{"location":"local-development/#setup-fork-cms","title":"Setup Fork CMS","text":"<p>See installation on how to install and configure the module in your new Fork CMS installation.</p>"},{"location":"local-development/#unit-testing","title":"Unit testing","text":""},{"location":"local-development/#fixtures","title":"Fixtures","text":"<p>We use DoctrineFixturesBundle to reset and reload fixtures data in our local DB. Execute this command with the <code>--append</code> flag to prevent erasing the whole database:</p> <pre><code>bin/console doctrine:fixtures:load --append --group=module-commerce\n</code></pre>"},{"location":"local-development/#phpunit","title":"PHPUnit","text":"<p>We use PHPUnit and create fixture objects using the awesome zenstruck/foundry library. This allows for an readable and expressive, on-demand fixture system to quickly create a certain situation, e.g. <code>ProductTest.php</code>. Check out the Symfonycasts series on Foundry.</p> <pre><code>public function it_can_get_a_discounted_price_with_vat(): void\n{\n    $product = ProductFactory::new()\n        -&gt;withPrice('299,99')\n        -&gt;withVat(21.00)\n        -&gt;withNewSpecial('240,00', (new DateTime())-&gt;modify('-1 day'))\n        -&gt;create();\n    self::assertEquals('36299', $product-&gt;getOldPrice(true)-&gt;getAmount());\n    self::assertEquals('29040', $product-&gt;getActivePrice(true)-&gt;getAmount());\n    self::assertTrue($product-&gt;hasActiveSpecialPrice());\n}\n</code></pre> <p>To run the all module(s) tests, simply run <code>simple-phpunit</code> using the filter option to run both backend and frontend tests:</p> <pre><code>bin/simple-phpunit --filter '\\\\Modules\\\\Commerce'\n</code></pre> <p>or run them from PhpStorm: </p> <ol> <li>Go to 'Add Configuration' &gt; 'New configuration' &gt; 'PHPUnit'</li> <li>Enter a name and select 'Test scope: Defined in the configuration file'</li> <li>Enter a filter in the Test runner options: <code>--filter '\\\\Modules\\\\Commerce'</code> to run both frontend and backend tests.</li> <li>Run the tests from PhpStorm using the green play button</li> </ol> <p></p>"},{"location":"money-pattern/","title":"Working with monetary values","text":"<p>\"If I had a dime for every time I've seen someone use FLOAT to store currency, I'd have $999.997634\" -- Bill Karwin</p> <p>Floating-point calculations, often used in financial transactions, are tricky and error-prone because of how computers  process them. Small mistakes can accumulate and cause severe damage to a business. For example:</p> <pre><code>var_dump(0.0.1 + 0.05 === 0.06)\n//  bool(false)\n</code></pre> <p>Money can be represented using simple integers ($1.23 stored as 123), but that causes more trouble than it solves: * Integers have limited range (they can overflow silently) * Subunits can change over history * It's tricky to handle rounding, e.g. taxes: \u20ac123.45 * 1.21 equals \u20ac149.3745 but that's not a valid amount. You have to   round it to \u20ac149.37. * Converting floats to int is tricky. Consider: <code>(int) (4.10 * 100)</code> which results in 409, not 410. The <code>(int)</code> cast   does not handle rounding. It strips the fractional part! </p>"},{"location":"money-pattern/#using-a-dedicated-money-library","title":"Using a dedicated Money library","text":"<p>Money is a perfect candidate for an immutable value object. Numbers are meaningless when not combined with a currency. In  Patterns of Enterprise Application Architecture, Martin Fowler describes  the Money Pattern. There are endless reasons why not to represent money as a simple value (e.g. floating point  calculations and rounding errors), so the Money Pattern describes a class encapsulating the amount and currency.</p> <p>\u201cA large proportion of the computers in this world manipulate money, so it\u2019s always puzzled me that money isn\u2019t a  first-class data type in any mainstream program- ming language.\u201d \u2013 Martin Fowler</p> <p></p> <p>It also defines all the mathematical operations on the value with respect to the currency.  It stores the amount as integer in cents, the lowest possible factor of the currency. We can not divide it more.</p> <p>In this module we use the moneyphp/money library that  implements this pattern. Some advantages are:</p> <ul> <li>Money objects are immutable</li> <li>Easy to use as Doctrine embeddable: <code>@ORM\\Embedded(class=\"\\Money\\Money\")</code></li> <li>Easy money formatting to different locales (with <code>IntlMoneyFormatter</code>)</li> <li>Easy conversion between currencies using converts (e.g. using Swap)</li> <li>Easy to sum up money, find a minimum/maximum/average, do allocations, ...</li> <li>Implements <code>JsonSerializable</code> to convert money to JSON to exchange monetary data with other systems.</li> <li></li> </ul> <p>As a consequence, monetary values in the MySQL database are stored in cents instead of a decimal number. A database  column is added for the <code>price_amount</code> and <code>price_currency_code</code>. This is similar to how other libraries work,  e.g. Stripe also expects monetary values in cents and describes it  an amount as \"A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1\".</p> <p>Integrating moneyPHP in Symfony, Doctrine and Twig can be done using  TheBigBrainsCompany/TbbcMoneyBundle.</p>"},{"location":"money-pattern/#examples","title":"Examples","text":"<pre><code>$fiveEuro = Money::EUR(500); // \u20ac5\n$tenEuro = $fiveEuro-&gt;add($fiveEuro); // \u20ac10\n\n$net = new Money(123, new Currency('USD')); // $1.23USD\n$gross = $net-&gt;multiply('1.10', Money::ROUND_UP); // Add 10% to 1.23 = 1.353, and round it up\n</code></pre> <p>In a Doctrine entity:</p> <pre><code>// Product.php\n// This will create a MySQL column `price_amount` and `price_currency_code`\n\n/**\n * @ORM\\Embedded(class=\"\\Money\\Money\")\n */\nprivate Money $price;\n</code></pre> <p>Or using our Twig helper function to render values:</p> <pre><code>{{ cart.subTotal|format_money_decimal() }}    // 5.00\n{{ cart.subTotal|format_money() }}            // \u20ac5.00\n</code></pre> <p>Warning</p> <p>Currently the Commerce module only supports a single currency: EURO</p>"},{"location":"money-pattern/#read-more","title":"Read more","text":"<ul> <li>http://martinfowler.com/eaaCatalog/money.html</li> <li>https://verraes.net/2011/04/fowler-money-pattern-in-php/</li> <li>https://github.com/moneyphp/money/</li> <li>https://www.slideshare.net/PiotrHorzycki/how-to-count-money-using-php-and-not-lose-money</li> </ul>"},{"location":"preview-environments/","title":"Preview environments","text":"<p>This module deploys to a preview environment using Github Actions. It uses the Okteto Kubernetes platform, which currently offers free Kubernetes deployments up to 10 pods and 5GB storage.</p>"},{"location":"preview-environments/#how-the-preview-deploy-works","title":"How the preview deploy works","text":"<ol> <li>The Github action <code>preview.yml</code> is scheduled and regularly deploys the master branch to Okteto. If a PR is created, it also creates a deploy suffixed with the PR number using the <code>preview-pr.yml</code> Github action.</li> <li>The <code>okteto-pipeline</code> file describes what should be deployed.<ul> <li>It will build the container image using the <code>Dockerfile</code><ul> <li>The Dockerfile defines a stage to build our frontend theme, and a stage that starts from <code>php:7.4-apache</code> and installs the needed dependencies. It will also download a Fork CMS project and make sure the module copied to the right directory.</li> </ul> </li> <li>It injects the container image tag, app label and deployment name in the Kubernetes files using Kustomize, and it deploys the Kubernetes files in the <code>k8s/</code> folder to Okteto.</li> <li>The <code>k8s/</code> folder defines the web deployment which deploys a single pod with two containers: the PHP app and a MariaDB container. No need for high-availability or persistant changes on a preview environment. If the pod is deleted or rescheduled, the DB resets based on the fixture data.</li> </ul> </li> <li>When the container starts up, the <code>deploy/docker-entrypoint.sh</code> will execute a few things:<ul> <li>Wait until the DB is up and running.</li> <li>Import the <code>.sql</code> backup of a fresh Fork CMS install in the database.</li> <li>Create an <code>app/config/parameters.yml</code> file with the right variables. We simply configure it to use the ENV vars that are defined in the container.</li> <li>Install a user avatar file to prevent a broken image (this is normally installed via the Fork CMS installer).</li> <li>Install our custom Composer dependencies required by this module</li> <li>Install the Sitemap Fork CMS module</li> <li>Install the Commerce Fork CMS module</li> <li>Apply a <code>git</code> patch that makes a few changes to the Core files: adding a bundle to <code>AppKernel.php</code>, adding <code>liip_imagine</code> presets for the thumbnails, configuring a twig extension for the Fork CMS theme, ... (\ud83d\udca1 feel free to suggest a better way to achieve this!)</li> <li>Generate some demo data using Doctrine Fixtures</li> <li>Execute some SQL queries that create a few pages in Fork CMS with the right module and widgets attached to it.</li> <li>Clear cache and ready to go \ud83d\ude80</li> </ul> </li> <li>The apache webserver process starts up</li> <li>When visiting https://fork-cms-module-commerce-demo-jessedobbelaere.cloud.okteto.net/ you should see the deployed website.</li> </ol>"}]}